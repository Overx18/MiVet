backend/
├── src/
│   ├── api/
│   │   ├── controllers/  # Lógica de negocio (qué hacer con cada petición)
│   │   │   ├── auth.controller.js       # Lógica para registro, login, logout
│   │   │   ├── user.controller.js       # Lógica para CRUD de usuarios, roles
│   │   │   ├── pet.controller.js        # Lógica para CRUD de mascotas y especies
│   │   │   ├── appointment.controller.js# Lógica para CRUD de citas
│   │   │   ├── service.controller.js    # Lógica para CRUD de servicios
│   │   │   ├── inventory.controller.js  # Lógica para CRUD de productos en inventario
│   │   │   ├── medicalRecord.controller.js # Lógica para historial médico
│   │   │   └── report.controller.js     # Lógica para generar reportes
│   │   │
│   │   ├── models/       # Definiciones de las tablas de la base de datos (Sequelize)
│   │   │   ├── index.js                 # Inicializa Sequelize y asocia los modelos
│   │   │   ├── user.model.js            # Modelo para Usuarios y Roles
│   │   │   ├── pet.model.js             # Modelo para Mascotas
│   │   │   ├── species.model.js         # Modelo para Especies
│   │   │   ├── appointment.model.js     # Modelo para Citas
│   │   │   ├── service.model.js         # Modelo para Servicios
│   │   │   ├── product.model.js         # Modelo para Productos (Inventario)
│   │   │   └── medicalRecord.model.js   # Modelo para Historial Médico
│   │   │
│   │   └── routes/       # Define los endpoints de la API
│   │       ├── index.js                 # Unifica y exporta todas las rutas
│   │       ├── auth.routes.js           # Rutas para /api/auth (login, register)
│   │       ├── user.routes.js           # Rutas para /api/users
│   │       ├── pet.routes.js            # Rutas para /api/pets
│   │       ├── appointment.routes.js    # Rutas para /api/appointments
│   │       ├── service.routes.js        # Rutas para /api/services
│   │       ├── inventory.routes.js      # Rutas para /api/inventory
│   │       ├── medicalRecord.routes.js  # Rutas para /api/medical-records
│   │       └── report.routes.js         # Rutas para /api/reports
│   │
│   ├── config/         # Archivos de configuración
│   │   ├── database.js     # Configuración de la conexión a la base de datos (Sequelize)
│   │   └── index.js        # Carga de variables de entorno con dotenv
│   │
│   ├── middlewares/    # Funciones que se ejecutan antes de los controladores
│   │   ├── auth.middleware.js       # Verifica el token JWT y protege rutas
│   │   ├── role.middleware.js       # Verifica que el usuario tenga el rol requerido (Admin, etc.)
│   │   └── validator.middleware.js  # Middleware para manejar errores de express-validator
│   │
│   ├── utils/          # Funciones de utilidad reutilizables
│   │   ├── errorHandler.js # Manejador de errores centralizado
│   │   └── jwt.js          # Funciones para generar y verificar tokens JWT
│   │
│   └── app.js          # Punto de entrada principal: configura y arranca el servidor Express
│
├── .env              # Variables de entorno (DB_USER, DB_PASS, JWT_SECRET, etc.)
├── .gitignore        # Archivos y carpetas a ignorar por Git
├── package.json      # Dependencias y scripts del proyecto
└── requirements_backend.txt # Listado de dependencias
frontend/
├── public/               # Archivos estáticos (favicon, etc.)
├── src/
│   ├── api/              # Configuración y llamadas a la API
│   │   └── axios.js      # Instancia de Axios configurada (baseURL, interceptors para JWT)
│   │
│   ├── assets/           # Imágenes, fuentes y otros recursos estáticos
│   │
│   ├── components/       # Componentes de UI reutilizables en toda la aplicación
│   │   ├── layout/       # Componentes de estructura (Navbar, Sidebar, Footer)
│   │   │   ├── MainLayout.jsx
│   │   │   └── AuthLayout.jsx # Layout para páginas de login/registro
│   │   │
│   │   └── ui/           # Componentes genéricos y atómicos (Button, Input, Modal, Card)
│   │       ├── Button.jsx
│   │       ├── Input.jsx
│   │       └── Spinner.jsx
│   │
│   ├── config/           # Constantes y configuración global
│   │   └── roles.js      # Define los roles de usuario (Admin, Cliente, etc.)
│   │
│   ├── features/         # Directorios para cada módulo funcional principal
│   │   ├── auth/         # Autenticación y perfil de usuario
│   │   │   ├── LoginPage.jsx
│   │   │   ├── RegisterPage.jsx
│   │   │   └── ProfilePage.jsx
│   │   │
│   │   ├── pets/         # Gestión de mascotas
│   │   │   ├── PetListPage.jsx
│   │   │   ├── PetForm.jsx
│   │   │   └── PetDetails.jsx
│   │   │
│   │   ├── appointments/ # Gestión de citas y calendario
│   │   │   ├── AppointmentsCalendarPage.jsx
│   │   │   └── AppointmentForm.jsx
│   │   │
│   │   ├── dashboard/    # Dashboards por rol
│   │   │   └── DashboardPage.jsx
│   │   │
│   │   ├── inventory/    # Gestión de inventario
│   │   │   └── InventoryPage.jsx
│   │   │
│   │   └── # ...otros módulos como services, users, reports, etc.
│   │
│   ├── hooks/            # Hooks personalizados reutilizables
│   │   ├── useAuth.js    # Hook para acceder al estado de autenticación (desde Zustand)
│   │   └── useRequireAuth.js # Hook para proteger rutas
│   │
│   ├── lib/              # Funciones de utilidad (antes `utils`)
│   │   ├── dateUtils.js  # Funciones para formatear fechas
│   │   └── clsx.js       # Utilidad para clases condicionales de Tailwind
│   │
│   ├── pages/            # Páginas principales y contenedores de nivel superior
│   │   ├── HomePage.jsx
│   │   └── NotFoundPage.jsx
│   │
│   ├── routes/           # Definición y protección de rutas
│   │   ├── index.jsx     # Componente principal que define todas las rutas de la app
│   │   └── ProtectedRoute.jsx # Componente para proteger rutas según rol y autenticación
│   │
│   ├── store/            # Estado global con Zustand
│   │   └── auth.store.js # Store para sesión de usuario, token y perfil
│   │
│   ├── App.jsx           # Componente raíz de React
│   ├── main.jsx          # Punto de entrada de la aplicación (renderiza App.jsx)
│   └── index.css         # Estilos globales y directivas de TailwindCSS
│
├── .gitignore            # Archivos ignorados por Git
├── index.html            # Punto de entrada HTML para Vite
├── package.json          # Dependencias y scripts del frontend
├── postcss.config.js     # Configuración de PostCSS (para Tailwind)
├── tailwind.config.js    # Configuración de TailwindCSS
└── vite.config.js        # Configuración de Vite